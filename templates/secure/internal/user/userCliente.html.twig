{% extends 'base.html.twig' %}
{% block title %}
    Usuarios
{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('Datatables/datatables.min.css') }}">
    {% endblock %}
    {% block body %}
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="page-title-box d-sm-flex align-items-center justify-content-between bg-galaxy-transparent">
                        <div class="page-title-right">
                            <ol class="breadcrumb m-0">
                                <li class="breadcrumb-item">
                                    <a href="{{ path('app_home') }}">
                                        Mi portal
                                    </a>
                                </li>
                                <li class="breadcrumb-item active">
                                    Usuarios clientes
                                </li>
                            </ol>
                        </div>
                    </div>
                </div>
            </div>
            {% for label, messages in app.flashes %}
                {% for message in messages %}
                    <div class="alert alert-{{ label }} alert-dismissible fade show mt-2" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endfor %}
            <div class="row mb-4">
                <div class="col-12 text-end">
                    <button type="button" class="btn btn-primary" onclick="abrirModalAltaUsuario()">
                        Alta de usuario
                    </button>
                </div>
            </div>
            <div id="modal-container"></div>
            <!-- Contenedor de tabla -->
            <div class="row">
                <div class="col-12">
                    <div id="tabla-container"></div>
                </div>
            </div>
            
            <div class="row mt-4">
                <div class="col-12 text-end">
                    <a class="btn btn-secondary" href="{{ path('app_home') }}">
                        Volver
                    </a>
                </div>
            </div>
        </div>
    {% endblock %}
    {% block javascripts %}
        {{ parent() }}
        <script src="{{ asset('js/jquery-3.7.1.min.js') }}"></script>
        <script src="{{ asset('Datatables/datatables.min.js') }}"></script>
        <script>
    function cargarTabla(tipo) {
        fetch(`{{ path('app_usuarios_ajax') }}?tipo=${tipo}`)
            .then(response => response.text())
            .then(html => {
                document.getElementById('tabla-container').innerHTML = html;
                // Reinicializar DataTable
                $('#tabla-usuarios').DataTable({
                    language: { url: esDatatable }
                });
            });
    }
    function modalVer(id) {
    // Cambiar de GET a POST para coincidir con tu ruta
    fetch(`{{ path('app_usuarios_ver_detalle') }}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `id=${id}`
    })
    .then(response => response.text())
    .then(html => {
        document.getElementById('modal-container').innerHTML = html;
        const modal = new bootstrap.Modal(document.getElementById('modalVerUsuario'));
        modal.show();
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error al cargar los datos del usuario');
    });
    }
    function abrirModalAltaUsuario() {
    fetch(`{{ path('app_usuarios_modal_alta') }}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `tipo_usuario=cliente`
    })
    .then(response => response.text())
    .then(html => {
        document.getElementById('modal-container').innerHTML = html;
        const modal = new bootstrap.Modal(document.getElementById('modalAltaUsuario'));
        modal.show();
    });
    }

    document.addEventListener('DOMContentLoaded', function() {
        cargarTabla('clientes');
        
    });
    function eliminarRepresentado(representado)
    {
        fetch('{{path("app_usuarios_eliminar_representado")}}',{
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `representado=${representado}`
        }).then(response=>response.text()).then().catch();
    }
    function modalEditar(id) {
        fetch(`{{ path('app_usuarios_editar') }}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `id=${id}`
        })
        .then(response => response.text())
        .then(html => {
            const modalVerEl = document.getElementById('modalVerUsuario');
            const modalVerBackdrop = document.querySelector('.modal-backdrop');
            const modalVerIsVisible = modalVerEl && modalVerEl.classList.contains('show');

            const showNuevoModal = () => {
                document.getElementById('modal-container').innerHTML = html;
                const modalAltaEl = document.getElementById('modalAltaUsuario');
                const modal = new bootstrap.Modal(modalAltaEl);
                modal.show();
            };

            if (modalVerIsVisible) {
                const modalVer = bootstrap.Modal.getInstance(modalVerEl) || new bootstrap.Modal(modalVerEl);
                modalVerEl.addEventListener('hidden.bs.modal', () => {
                    showNuevoModal();
                }, { once: true });
                modalVer.hide();
            } else {
                showNuevoModal();
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error al cargar los datos del usuario');
        });
    }
    const modalConfirmacionHTML = `
    <div class="modal fade" id="modalConfirmarEliminacion" tabindex="-1" aria-labelledby="modalConfirmarEliminacionLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalConfirmarEliminacionLabel">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center">
                        <i class="fas fa-exclamation-triangle text-warning mb-3" style="font-size: 3rem;"></i>
                        <h6>¿Está seguro que desea eliminar este usuario?</h6>
                        <p class="text-muted">Esta acción no se puede deshacer.</p>
                    </div>
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary bg-primary" id="btnConfirmarEliminacion">Eliminar</button>
                </div>
            </div>
        </div>
    </div>`;
    let usuarioAEliminar = null;
    let tipoUsuarioAEliminar = null;

    // Función para mostrar el modal de confirmación
    function mostrarModalConfirmacion(id, tipo = 'cliente') {
        usuarioAEliminar = id;
        tipoUsuarioAEliminar = tipo;
        
        // Insertar el modal si no existe
        if (!document.getElementById('modalConfirmarEliminacion')) {
            document.body.insertAdjacentHTML('beforeend', modalConfirmacionHTML);
        }
        
        // Mostrar el modal
        const modal = new bootstrap.Modal(document.getElementById('modalConfirmarEliminacion'));
        modal.show();
        
        // Agregar event listener al botón de confirmación
        const btnConfirmar = document.getElementById('btnConfirmarEliminacion');
        btnConfirmar.onclick = function() {
            confirmarEliminacion();
            modal.hide();
        };
    }
        function EliminarUsuario(id) {
            mostrarModalConfirmacion(id, 'cliente');
        }
        function confirmarEliminacion() {
        if (usuarioAEliminar) {
            fetch(`{{ path('app_usuarios_eliminar') }}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `id=${usuarioAEliminar}`
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error al eliminar el usuario');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al eliminar el usuario');
            });
            
            // Limpiar variables
            usuarioAEliminar = null;
            tipoUsuarioAEliminar = null;
        }
    }

function initializarModalSector() {
    const sectorSelect = document.getElementById('sector');
    const divSectorExtraData = document.getElementById('divSectorExtraData');
    const sectorExtraDataInput = document.getElementById('sectorExtraData');
    
    if (sectorSelect && divSectorExtraData) {
        
        sectorSelect.removeEventListener('change', handleSectorChange);
        sectorSelect.addEventListener('change', handleSectorChange);
        
        function handleSectorChange() {
            const selectedOption = sectorSelect.options[sectorSelect.selectedIndex];
            const requiresExtraData = selectedOption.getAttribute('data-requires-data-extra');
            
            console.log('Sector seleccionado:', selectedOption.text);
            console.log('Requiere datos extra:', requiresExtraData);
            
            if (requiresExtraData === 'true' || requiresExtraData === '1') {
                divSectorExtraData.style.display = 'block';
                if (sectorExtraDataInput) {
                    sectorExtraDataInput.setAttribute('required', 'required');
                }
            } else {
                divSectorExtraData.style.display = 'none';
                if (sectorExtraDataInput) {
                    sectorExtraDataInput.removeAttribute('required');
                    sectorExtraDataInput.value = '';
                }
            }
        }
    }
    const modalElement = document.getElementById('modalAltaUsuario');
    if (modalElement) {
        modalElement.addEventListener('hidden.bs.modal', function() {
            const form = document.getElementById('formAltaUsuario');
            if (form) {
                form.reset();
                if (divSectorExtraData) {
                    divSectorExtraData.style.display = 'none';
                }
            }
        });
    }
}
    </script>
    {% endblock %}