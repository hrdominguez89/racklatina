{% extends 'base_public.html.twig' %}

{% block title %}Racklatina - Portal clientes
{% endblock %}

{% block body %}

	<!-- auth page content -->

	<!-- end row -->

		<div class="row justify-content-center"> <div class="col-8">
			<div class="card mt-4 card-bg-fill">

				<div class="card-body p-4">
					<div class="row">
						<div class="col-12 text-center mt-2 mb-4">
							<h4 class="text-rkl-secondary">Registro de clientes</h4>
							{# <p class="text-muted"></p> #}
						</div>
					</div>
					<div class="row">
						{{ form_start(form, {attr: {'data-turbo': 'false',class: 'needs-validation'}}) }}
						{% for error in form.vars.errors %}
							<div class="alert alert-danger">{{ error.message }}</div>
						{% endfor %}
						{% if form.vars.errors|length > 0 %}
							<div class="alert alert-danger">
								{{ form_errors(form) }}
							</div>
						{% endif %}
					</div>
						
					<div class="row">
						<div class="col-12 col-md-4 mb-3">
							{{ form_label(form.firstName) }}
							{{ form_widget(form.firstName, {'attr': {'class': 'form-control'}}) }}
							{{ form_errors(form.firstName) }}
						</div>
						<div class="col-12 col-md-4 mb-3">
							{{ form_label(form.lastName) }}
							{{ form_widget(form.lastName, {'attr': {'class': 'form-control'}}) }}
							{{ form_errors(form.lastName) }}
						</div>
						<div class="col-12 col-md-4 mb-3">
							{{ form_label(form.phoneNumber) }}
							{{ form_widget(form.phoneNumber, {'attr': {'class': 'form-control'}}) }}
							{{ form_errors(form.phoneNumber) }}
						</div>
						<div class="col-12 col-md-6 mb-3">
							{{ form_label(form.email) }}
							{{ form_widget(form.email, {'attr': {'class': 'form-control'}}) }}
							{{ form_errors(form.email) }}
						</div>
						<div class="col-12 col-md-6 mb-3">
							{{ form_label(form.plainPassword) }}
							{{ form_widget(form.plainPassword, {'attr': {'class': 'form-control'}}) }}
							{{ form_errors(form.plainPassword) }}
						</div>
					</div>
					<hr>
					<div class="row">
						<div class="col-12 text-center mt-2 mb-4">
							<h5 class="text-rkl-secondary">Información de la empresa</h5>
						</div>
					</div>
					<div class="row">
						<div class="col-12 col-md-6 mb-3">
							{{ form_label(form.cuit) }}
							{{ form_widget(form.cuit, {'attr': {'class': 'form-control'}}) }}
							{{ form_errors(form.cuit) }}
						</div>
						<div class="col-12 col-md-6 mb-3">
							{{ form_label(form.companyName) }}
							<div id="company-search-message" class="text-danger small mb-1" style="display: none;">
								* No se encontró empresa con ese CUIT
							</div>
							<div class="position-relative">
								{{ form_widget(form.companyName, {'attr': {'class': 'form-control', 'readonly': true, 'placeholder': 'Se completará automáticamente'}}) }}
								<div id="company-loading" class="position-absolute top-50 end-0 translate-middle-y me-2" style="display: none;">
									<div class="spinner-border spinner-border-sm text-primary" role="status">
										<span class="visually-hidden">Buscando...</span>
									</div>
								</div>
							</div>
							{{ form_errors(form.companyName) }}
						</div>
						<div class="col-12 col-md-6 mb-3">
							{{ form_label(form.jobTitle) }}
							{{ form_widget(form.jobTitle, {'attr': {'class': 'form-control'}}) }}
							{{ form_errors(form.jobTitle) }}
						</div>
						<div class="col-12 col-md-6 mb-3">
							{{ form_label(form.role) }}
							<div class="d-flex flex-column gap-2 mt-2">
								{{ form_widget(form.role) }}
							</div>
							{{ form_errors(form.role) }}
						</div>

						<div class="mt-4">
							<button class="btn btn-primary w-100" type="submit">Registrarse</button>
						</div>

						{{ form_end(form) }}
						<div class="mt-4 text-center">
							<div class="mt-4 text-center">
								<p class="mb-0">¿Ya tenés cuenta?
									<a href="{{ path('app_login') }}" class="fw-semibold text-rkl-primary text-decoration-underline">
										Iniciá sesión
									</a>
								</p>
							</div>
						</div>
					
					</div>
				</div>
				<!-- end card body -->
			</div>
			<!-- end card -->


		</div>
	</div>
	<!-- end row -->

	<script>
		document.addEventListener('DOMContentLoaded', function() {
			// Elementos DOM
			const cuitInput = document.querySelector('input[name*="cuit"]');
			const companyNameInput = document.querySelector('input[name*="companyName"]');
			const loadingIndicator = document.getElementById('company-loading');
			const errorMessage = document.getElementById('company-search-message');
			
			// Verificar que todos los elementos existen
			if (!cuitInput || !companyNameInput || !loadingIndicator || !errorMessage) {
				console.error('No se encontraron todos los elementos DOM necesarios');
				return;
			}
			
			// Configuración
			const SEARCH_URL = '{{ path("reg_cliente_cuit") }}';
			let searchTimeout;
			
			// Función para limpiar estados
			function clearStates() {
				hideLoading();
				hideError();
			}
			
			// Función para mostrar loading
			function showLoading() {
				loadingIndicator.style.display = 'block';
			}
			
			// Función para ocultar loading
			function hideLoading() {
				loadingIndicator.style.display = 'none';
			}
			
			// Función para mostrar error
			function showError() {
				errorMessage.style.display = 'block';
			}
			
			// Función para ocultar error
			function hideError() {
				errorMessage.style.display = 'none';
			}
			
			// Función para limpiar nombre de empresa
			function clearCompanyName() {
				companyNameInput.value = '';
			}
			
			// Función para establecer nombre de empresa
			function setCompanyName(name) {
				companyNameInput.value = name;
			}
			
			// Función principal de búsqueda
			async function searchCompanyByCuit(cuit) {
				try {
					showLoading();
					hideError();
					
					const response = await fetch(SEARCH_URL, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'X-Requested-With': 'XMLHttpRequest'
						},
						body: JSON.stringify({ cuit: cuit })
					});
					
					const data = await response.json();
					
					if (response.ok && data.success) {
						setCompanyName(data.companyName);
						hideError();
					} else {
						clearCompanyName();
						showError();
					}
				} catch (error) {
					console.error('Error en búsqueda:', error);
					clearCompanyName();
					showError();
				} finally {
					hideLoading();
				}
			}
			
			// Event listener para el input de CUIT
			cuitInput.addEventListener('input', function(e) {
				const cuit = e.target.value.trim();
				
				// Limpiar timeout anterior
				clearTimeout(searchTimeout);
				
				// Si el CUIT está vacío, limpiar todo
				if (!cuit) {
					clearStates();
					clearCompanyName();
					return;
				}
				
				// Debounce: esperar 500ms después de que el usuario termine de escribir
				searchTimeout = setTimeout(() => {
					searchCompanyByCuit(cuit);
				}, 500);
			});
			
			// Event listener para cuando el usuario sale del campo (backup)
			cuitInput.addEventListener('blur', function(e) {
				const cuit = e.target.value.trim();
				if (cuit ) {
					// Cancelar cualquier búsqueda pendiente y ejecutar inmediatamente
					clearTimeout(searchTimeout);
					searchCompanyByCuit(cuit);
				}
			});
		});
	</script>
{% endblock %}